<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Code Ramblings]]></title>
  <link href="http://felix.oghina.com/atom.xml" rel="self"/>
  <link href="http://felix.oghina.com/"/>
  <updated>2014-07-23T22:22:25+03:00</updated>
  <id>http://felix.oghina.com/</id>
  <author>
    <name><![CDATA[Felix OghinÄƒ]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Git: Moving History]]></title>
    <link href="http://felix.oghina.com/2014/07/23/git-moving-history/"/>
    <updated>2014-07-23T20:37:24+03:00</updated>
    <id>http://felix.oghina.com/2014/07/23/git-moving-history</id>
    <content type="html"><![CDATA[<p>The title of this post may make it sound like it&rsquo;s going to be about how git changed the face of software development and entered us into a
new era of coding collaboration. No. This post is about how to copy a subtree from one git repository to another, while keeping its history.</p>

<p>Let&rsquo;s say you&rsquo;ve been working on a component in an incubator-style repository, and it&rsquo;s time to move it to the main project&rsquo;s repository.
Simply copying the code would destroy the valuable history in the target repo, so that should be avoided. There are also lots of other
components in the incubator repo that you don&rsquo;t want to move.</p>

<h2>Step 1: Export your component to a temporary repository</h2>

<p>You can do this using <code>git filer-branch</code>. <em>Warning:</em> this will reduce your local copy of the incubator repository to <em>just</em> your component.
Either clone it locally to a different path or be prepared to clone it again from the remote.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">incubator$ git filter-branch --subdirectory-filter components/my-component -- --all</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now your repository has been reduced to just the contents <strong>and history</strong> of <code>components/my-component</code>.</p>

<h2>Step 2: Create a patch for the entire history of your component</h2>

<p>Use <code>git format-patch</code> to export all of your commits to a patch file. Props to <a href="https://twitter.com/rombert">@rombert</a> for this idea.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">incubator$ git format-patch --stdout --root $(git rev-list HEAD | tail -n 1) HEAD &gt; my-component.patch</span>
</span></code></pre></td></tr></table></div></figure>


<p>I feel like this command could use some explaining. First off, we&rsquo;re telling <code>format-patch</code> to output everything to <code>--stdout</code>. Otherwise,
it would create one patch file per commit, which can get pretty clumsy if there are lots of them. Second, we&rsquo;re passing the output of
<code>git rev-list HEAD | tail -n 1</code> for the <code>--root</code> parameter. The enclosed command will find find the <code>sha1</code> of the very first commit, while
the <code>--root</code> parameter will tell <code>format-patch</code> to include that commit, not start from it. Lastly, <code>HEAD</code> is the target ref, which is
basically the most recent commit.</p>

<h2>Step 3: Apply the patch</h2>

<p>Now it&rsquo;s time to add your component to the main project. Of course, you don&rsquo;t want to add your component to the root of the repository
(which is what all the paths in the patch are relative to). Thankfully, git supports prepending a path to all filenames in a patch.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">main-project$ git am --directory components/my-component my-component.patch</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now your main project contains your component and all of its history. Some notes:</p>

<ol>
<li>Only one branch will be copied. If your component development happened on multiple branches, that will be lost.</li>
<li>No tags will be copied to the main repository, you will need to tag your commits manually.</li>
<li>Commit IDs will change, so you will not be able to <a href="https://github.com/foghina/git-copy-tags">copy your tags automatically</a>.</li>
</ol>


<p>Pretty neat.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Video Surveillance... in Bash]]></title>
    <link href="http://felix.oghina.com/2012/11/18/video-surveillance-in-bash/"/>
    <updated>2012-11-18T00:47:00+02:00</updated>
    <id>http://felix.oghina.com/2012/11/18/video-surveillance-in-bash</id>
    <content type="html"><![CDATA[<p>My parents recently asked me to install an IP video surveillance camera at their
house (for reasons). Since I already have a Linux server there running 24/7, it
was only natural that I somehow set it up to record the camera&rsquo;s video feed (mp4
over RTSP). After a bit of googling I found <a href="http://www.zoneminder.com/">ZoneMinder</a>, which looked like
it did everything I needed. However, after wasting half a day fiddling with it,
I realized that it is, although very complex and feature-rich, not up to my
needs: no matter how you configure it, it will convert the video feed into
thousands of JPEG files and store them randomly on the filesystem. It also uses
a MySQL database to store its information (so extra dependencies), viewing the
camera live is very slow (refreshes a static image every 4-5 seconds), replaying
a recording needs the Java plug-in in your browser (which I don&rsquo;t have on
Ubuntu) and you have to &ldquo;export&rdquo; a movie clip (i.e. it has to convert all the
images it saved back to a video). What a waste, but I can see how this solution
could be the most compatible with all possible environments (camera types, OSes,
etcetera). I was unable to set up authentication or a maximum total file size,
either.</p>

<p>Being fed up with ZoneMinder, I ditched it and decided to try and hack together
something of my own. After fiddling for the next half of the day with <code>ffmpeg</code>,
I came up with a viable solution, in bash.</p>

<figure class='code'><figcaption><span>bashsurv.sh</span><a href='https://gist.github.com/4100939'>View Gist</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>
</span><span class='line'><span class="nv">OUTPUT_DIR</span><span class="o">=</span><span class="s2">&quot;/var/www/bashsurv&quot;</span>
</span><span class='line'><span class="nv">FFMPEG_INPUT_FLAGS</span><span class="o">=</span><span class="s2">&quot;-rtsp_transport tcp&quot;</span>
</span><span class='line'><span class="nv">FFMPEG_SOURCE</span><span class="o">=</span><span class="s2">&quot;rtsp://192.168.1.123/video.mp4&quot;</span>
</span><span class='line'><span class="nv">FFMPEG_OUTPUT_FLAGS</span><span class="o">=</span><span class="s2">&quot;-r 20 -acodec libspeex&quot;</span>
</span><span class='line'><span class="nv">FFMPEG_OUTPUT_EXT</span><span class="o">=</span><span class="s2">&quot;ogv&quot;</span>
</span><span class='line'><span class="nv">CLIP_LENGTH</span><span class="o">=</span>600 <span class="c"># seconds</span>
</span><span class='line'><span class="nv">TIMELIMIT</span><span class="o">=</span>620 <span class="c"># seconds, allows for network timeout over CLIP_LENGTH</span>
</span><span class='line'><span class="nv">KEEP_FILES_FOR</span><span class="o">=</span>10080 <span class="c"># minutes</span>
</span><span class='line'>
</span><span class='line'><span class="k">while</span> <span class="o">[</span> <span class="nb">true</span> <span class="o">]</span><span class="p">;</span> <span class="k">do</span>
</span><span class='line'><span class="k">  </span>avconv -timelimit <span class="nv">$TIMELIMIT</span> <span class="nv">$FFMPEG_INPUT_FLAGS</span> -i <span class="nv">$FFMPEG_SOURCE</span> -t <span class="nv">$CLIP_LENGTH</span> <span class="nv">$FFMPEG_OUTPUT_FLAGS</span> <span class="nv">$OUTPUT_DIR</span>/<span class="k">$(</span>date +%F.%T<span class="k">)</span>.<span class="nv">$FFMPEG_OUTPUT_EXT</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">[</span> <span class="nv">$?</span> -ne 0 <span class="o">]</span> <span class="p">;</span>
</span><span class='line'>  <span class="k">then</span>
</span><span class='line'><span class="k">    </span>sleep 1m <span class="p">;</span>
</span><span class='line'>  <span class="k">fi</span>
</span><span class='line'><span class="k">  </span>find <span class="nv">$OUTPUT_DIR</span>/ -type f -mmin +<span class="nv">$KEEP_FILES_FOR</span> -delete
</span><span class='line'><span class="k">done</span>
</span></code></pre></td></tr></table></div></figure>


<p>Unfortunately, I was not able to just copy the codec, which would have been
optimal in terms of resource (CPU/memory) usage on my server, but it doesn&rsquo;t
use up <em>that</em> much. Now I can set <code>OUTPUT_DIR</code> to somewhere in my <code>/var/www</code>,
set up authentication on it via <code>.htaccess</code> and be done with it. Dad can now
easily view the recordings using his browser, and if he really needs to view the
live stream I can just bookmark the RTSP stream in VLC for him or something.</p>

<p>Bottom line: K.I.S.S.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to fuck up with find]]></title>
    <link href="http://felix.oghina.com/2012/10/04/how-to-fuck-up-with-find/"/>
    <updated>2012-10-04T20:32:00+03:00</updated>
    <id>http://felix.oghina.com/2012/10/04/how-to-fuck-up-with-find</id>
    <content type="html"><![CDATA[<p>Welcome to the tutorial on how to successfully fuck up with <code>find</code>, the command line tool. In case you&rsquo;re not familiar with the <code>find</code> command, <a href="http://linux.die.net/man/1/find">RTFM</a>, it&rsquo;s freaking beautiful. However, in the hands of a non-RTFM-ing user (like me) it can be quite destructive. Let me demonstrate.</p>

<p>I wanted to use <code>find</code> to delete a bunch of files from a hierarchy, based on a simple name rule. So I thought I should use <a href="http://linux.die.net/man/1/xargs"><code>xargs</code></a> in combination with <code>find</code> to delete them. After a quick lookup of the <code>-print0</code> and <code>-name</code> arguments of the <code>find</code> command, I concluded that it would be a good idea to run the following command:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">$</span> find . -print0 -name example <span class="p">|</span> xargs -0 rm
</span></code></pre></td></tr></table></div></figure>


<p>Can you guess what it did? Let me help you: it deleted all the files under <code>.</code>. The directories are still there, but they&rsquo;re not any help, are they? Now, fortunately for me, this was in a git repository that I had just pushed to a remote, so I was able to just clone it again.</p>

<p>In order to understand what happened, I had to actually read the man page carefully and pay attention. Apparently, everything that comes after the path (in my case <code>.</code>) on the command line is treated as an expression by <code>find</code>, where every argument evaluates to true or false, and is ORed with the next one. The <code>-print0</code> argument always returns true, because it&rsquo;s only meant to change the output, not the actual filtering. Because of this, my <code>-name</code> argument was completely ignored.</p>

<p>To conclude, the correct command would have been:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">$</span> find . -name example -print0 <span class="p">|</span> xargs -0 rm
</span></code></pre></td></tr></table></div></figure>


<p>This way, the <code>-name</code> argument will take precedence over <code>print0</code>. However, because I actually spent time reading the manual this time, I discovered <code>find</code> also has a <code>-delete</code> argument, so <code>xargs</code> is not actually needed at all:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">$</span> find . -name example -delete
</span></code></pre></td></tr></table></div></figure>


<p>As I was saying, freaking beautiful.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Beware of the JavaScript reference!]]></title>
    <link href="http://felix.oghina.com/2012/04/22/beware-of-the-javascript-reference/"/>
    <updated>2012-04-22T15:00:00+03:00</updated>
    <id>http://felix.oghina.com/2012/04/22/beware-of-the-javascript-reference</id>
    <content type="html"><![CDATA[<p>As you (hopefully) know, variables in JavaScript are actually references. As you (most surely) know, references can bite you in the ass in the most unexpected places, so here&rsquo;s one of them. Say you have an object that you continuously change (e.g. recursively) and want to see how it &ldquo;evolves&rdquo; by callingÂ console.log()Â on it. You would expect to see &ldquo;snapshots&rdquo; of the object logged, right? Wrong. For example, try running this code in a console (<strong>Note:</strong>Â I have only tried this in Chrome, not sure how other browsers behave):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">mutant</span> <span class="o">=</span> <span class="p">{</span><span class="s2">&quot;name&quot;</span><span class="o">:</span> <span class="s2">&quot;Leela Turanga&quot;</span><span class="p">};</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">mutant</span><span class="p">);</span>
</span><span class='line'><span class="nx">mutant</span><span class="p">[</span><span class="s2">&quot;characteristic&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="s2">&quot;One eye&quot;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, expand the Object and voilÃ , you&rsquo;ll see both properties. This can be very confusing with more complicated objects. If you&rsquo;re too lazy to run that code, here&rsquo;s proof:</p>

<p><img src="http://felix.oghina.com/images/posts/javascript-reference.png" title="Screenshot of Chrome console" ></p>

<p>As a solution, you can clone the object before logging it. <a href="http://stackoverflow.com/questions/122102/what-is-the-most-efficient-way-to-clone-a-javascript-object">Here</a> are a few suggestions for how to do that.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails setup with RVM on Ubuntu]]></title>
    <link href="http://felix.oghina.com/2012/04/17/rails-setup-with-rvm-on-ubuntu/"/>
    <updated>2012-04-17T03:39:45+03:00</updated>
    <id>http://felix.oghina.com/2012/04/17/rails-setup-with-rvm-on-ubuntu</id>
    <content type="html"><![CDATA[<p>Given how developer friendly as Ruby on Rails is, getting a development environment up and running can be surprisingly tricky. I will describe the process that I consider to be &ldquo;best practice&#8221;Â here, step by step. Although my guide will be focused on Ubuntu, the general idea should be the same on other distros as well. Also, please take note of the date of this post. If you&rsquo;re reading this even a few months after I wrote this, don&rsquo;t be surprised if your mileage will vary.</p>

<p><del>First off, we&rsquo;re going to need Ruby, right? So let&rsquo;s install that, and also throw in curl (we&rsquo;re going to need it in a bit):</del></p>

<p><strong>Update:</strong>Â actually, you don&rsquo;t need Ruby installed on your system at all. Installing curl is enough here:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">$</span> sudo apt-get install curl
</span></code></pre></td></tr></table></div></figure>


<p>Next, we&rsquo;re going to install <a href="https://rvm.io/">RVM</a>. RVM is, at the website puts it, a Ruby Version Manager. Basically, it allows you to install multiple versions of Ruby in your home folder and use them seamlessly (as if they were the default Ruby in the system). This is useful for us because the version of Ruby Ubuntu installed is 1.8.7 (as of this writing), while the latest stable version of Ruby is 1.9.3. RVM also allows us to keep separate collections of gems (called gemsets, for obvious reasons). This is very useful when working with multiple projects that may have conflicting dependencies.</p>

<p>Installing RVM is dead simple. Just run the command under <strong>Quick Install</strong>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">$</span> curl -L get.rvm.io <span class="p">|</span> bash -s stable
</span></code></pre></td></tr></table></div></figure>


<p><strong>Warning:</strong>Â the above command might not be the latest one. Make sure to double check with the RVM website.</p>

<p>Now, close the current terminal and open a new one. This is so that RVM can load into the new bash session. Now, let&rsquo;s see what RVM suggests we should install:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">$</span> rvm requirements
</span><span class='line'>
</span><span class='line'><span class="go">Requirements for Linux ( DISTRIB_ID=Ubuntu</span>
</span><span class='line'><span class="go">DISTRIB_RELEASE=11.10</span>
</span><span class='line'><span class="go">DISTRIB_CODENAME=oneiric</span>
</span><span class='line'><span class="go">DISTRIB_DESCRIPTION=&quot;Ubuntu 11.10&quot; )</span>
</span><span class='line'>
</span><span class='line'><span class="go">NOTE: &#39;ruby&#39; represents Matz&#39;s Ruby Interpreter (MRI) (1.8.X, 1.9.X)</span>
</span><span class='line'><span class="go">             This is the *original* / standard Ruby Language Interpreter</span>
</span><span class='line'><span class="go">      &#39;ree&#39;  represents Ruby Enterprise Edition</span>
</span><span class='line'><span class="go">      &#39;rbx&#39;  represents Rubinius</span>
</span><span class='line'>
</span><span class='line'><span class="go">bash &gt;= 4.1 required</span>
</span><span class='line'><span class="go">curl is required</span>
</span><span class='line'><span class="go">git is required (&gt;= 1.7 for ruby-head)</span>
</span><span class='line'><span class="go">patch is required (for 1.8 rubies and some ruby-head&#39;s).</span>
</span><span class='line'>
</span><span class='line'><span class="go">To install rbx and/or Ruby 1.9 head (MRI) (eg. 1.9.2-head),</span>
</span><span class='line'><span class="go">then you must install and use rvm 1.8.7 first.</span>
</span><span class='line'>
</span><span class='line'><span class="go">Additional Dependencies:</span>
</span><span class='line'><span class="gp">#</span> For Ruby / Ruby HEAD <span class="o">(</span>MRI, Rubinius, <span class="p">&amp;</span> REE<span class="o">)</span>, install the following:
</span><span class='line'><span class="go">  ruby: /usr/bin/apt-get install build-essential openssl libreadline6 libreadline6-dev curl git-core zlib1g zlib1g-dev libssl-dev libyaml-dev libsqlite3-dev sqlite3 libxml2-dev libxslt-dev autoconf libc6-dev ncurses-dev automake libtool bison subversion</span>
</span><span class='line'>
</span><span class='line'><span class="gp">#</span> For JRuby, install the following:
</span><span class='line'><span class="go">  jruby: /usr/bin/apt-get install curl g++ openjdk-6-jre-headless</span>
</span><span class='line'><span class="go">  jruby-head: /usr/bin/apt-get install ant openjdk-6-jdk</span>
</span><span class='line'>
</span><span class='line'><span class="gp">#</span> For IronRuby, install the following:
</span><span class='line'><span class="go">  ironruby: /usr/bin/apt-get install curl mono-2.0-devel</span>
</span></code></pre></td></tr></table></div></figure>


<p>Install the dependencies suggested by RVM for Ruby (see the marked lines above and make sure to use sudo).</p>

<p>Good. Now it&rsquo;s time to install Ruby! <strong>Again.</strong>Â The next command will install the latest stable Ruby into your home directory (so the system is not affected). Beware, it will take a long time to complete, as it downloads the Ruby source code and compiles it!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">$</span> rvm install ruby
</span></code></pre></td></tr></table></div></figure>


<p>Now, if the command above finishes with a message similar to:</p>

<pre><code>RVM is not a function, selecting rubies with 'rvm use ...' will not work.
Please visit https://rvm.io/integration/gnome-terminal/ for a solution.
</code></pre>

<p>Then do visit that URL and follow the instructions there. Finished? Good. Open a new terminal, <strong>again</strong>. Now type:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">$</span> rvm use ruby
</span></code></pre></td></tr></table></div></figure>


<p>If all went well, you should see a green message telling you which Ruby is being used. Next, you should create a gemset (we talked about them in the beginning) for your new project, and also switch to it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">$</span> rvm gemset create myproject <span class="o">&amp;&amp;</span> rvm gemset use myproject
</span></code></pre></td></tr></table></div></figure>


<p>You finally have your environment set up. Next step is to install the rails gem:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">$</span> gem install rails --no-rdoc --no-ri
</span></code></pre></td></tr></table></div></figure>


<p><strong>Note:</strong>Â theÂ &mdash;no-rdoc &mdash;no-riÂ parameters are passed so that it doesn&rsquo;t waste time installing docs that are available on the Internet anyway. If you wish to have them installed for some reason, just omit those parameters.</p>

<p>Good, now you&rsquo;re ready to create your new Rails app! Simply type:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">$</span> rails new myproject
</span></code></pre></td></tr></table></div></figure>


<p>To run the new app:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">$</span> <span class="nb">cd </span>myproject/
</span><span class='line'><span class="gp">$</span> rails server
</span></code></pre></td></tr></table></div></figure>


<p>You just got an error now, didn&rsquo;t you? Did it sound like this?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">in `autodetect&#39;: Could not find a JavaScript runtime. See https://github.com/sstephenson/execjs for a list of available runtimes. (ExecJS::RuntimeUnavailable)</span>
</span></code></pre></td></tr></table></div></figure>


<p>What&rsquo;s happening is that Rails needs a JavaScript runtime (well, duh, it says so right in the error message!). What it needs it for, from what I can tell, is the new CoffeeScript (and LESS?) functionality added in the asset pipeline in Rails 3.1. To fix this, just require a JavaScript runtime gem in your app. We&rsquo;re going to use one called &ldquo;therubyracer&rdquo;. Open up the file called &ldquo;Gemfile&rdquo; and add this line to it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">gem &#39;therubyracer&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, in order to actually install that gem, just run:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">$</span> bundle
</span></code></pre></td></tr></table></div></figure>


<p>in your project&rsquo;s directory. The bundleÂ command basically looks in your Gemfile and installs / updates dependencies based on it. Running the app should now actually finally ultimately work:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">$</span> rails server
</span><span class='line'><span class="go">=&gt; Booting WEBrick</span>
</span><span class='line'><span class="go">=&gt; Rails 3.2.3 application starting in development on http://0.0.0.0:3000</span>
</span><span class='line'><span class="go">=&gt; Call with -d to detach</span>
</span><span class='line'><span class="go">=&gt; Ctrl-C to shutdown server</span>
</span><span class='line'><span class="go">[2012-04-17 00:24:51] INFO  WEBrick 1.3.1</span>
</span><span class='line'><span class="go">[2012-04-17 00:24:51] INFO  ruby 1.9.3 (2012-02-16) [x86_64-linux]</span>
</span><span class='line'><span class="go">[2012-04-17 00:24:51] INFO  WEBrick::HTTPServer#start: pid=4595 port=3000</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, every time you open a new terminal and intend to run the project, you will have to:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">$</span> <span class="nb">cd </span>myproject/
</span><span class='line'><span class="gp">$</span> rvm use ruby
</span><span class='line'><span class="gp">$</span> rvm gemset use myproject
</span><span class='line'><span class="gp">$</span> rails server
</span></code></pre></td></tr></table></div></figure>


<p>If you want to skip the two <code>rvm</code> commands, you can use an <code>.rvmrc</code> file. That, however, is beyond the scope of this post, and is documented <a href="https://rvm.io/workflow/rvmrc/">here</a>.</p>

<p>As I was saying, surprisingly tricky. Sure, you could have used the Ruby and Rails provided by your package manager, but given the rapid development of both, you would be several major versions behind and lacking many features. Also, managing multiple projects is now a breeze. Just install the required Ruby (some projects might rely on older versions of it), create a new gemset for it, install dependencies, run.</p>

<p>Whew!</p>
]]></content>
  </entry>
  
</feed>
